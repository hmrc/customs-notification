# Copyright 2024 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~
include "backend.conf"

appName=customs-notification
appUrl="http://"${appName}".localhost"

application.logger.name=${appName}

bootstrap.http.headersAllowlist += "X-CDS-Client-ID"
bootstrap.http.headersAllowlist += "X-Conversation-ID"
bootstrap.http.headersAllowlist += "X-Submitter-Identifier"

# Additional play modules can be added here
play.modules.enabled += "uk.gov.hmrc.customs.notification.config.ConfigModule"
play.modules.enabled += "uk.gov.hmrc.customs.notification.CustomsApiCommonModule"

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

play.modules.enabled += "uk.gov.hmrc.customs.notification.modules.NotificationPollingModule"

# The application languages
play.i18n.langs = ["en"]

play.http.errorHandler = "uk.gov.hmrc.customs.notification.config.CustomsErrorHandler"

# run the retry poller
retry.poller.enabled = true
# poller delay
retry.poller.interval.milliseconds = 1000
# time to wait before a failed notification is processed again
retry.poller.retryAfterFailureInterval.seconds = 30
# time to wait before an notification stuck at in-progress status is processed again
retry.poller.inProgressRetryAfter.seconds = 30
# number of poller instances per application
retry.poller.instances = 1

# Fix SSL Engine closed already exceptions
http-verbs.retries.ssl-engine-closed-already.enabled = true

# If a 4xx or 3xx is received then retry after x minutes
non.blocking.retry.after.minutes = 1

# run the poller that unblocks permanently-failed notifications
unblock.poller.enabled = true
# poller frequency
unblock.poller.interval.milliseconds = 30000

# two weeks
ttlInSeconds = 1209600

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Don't follow redirects - this is security risk, users should update config in dev hub instead.
play.ws.followRedirects =  false

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and 
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule. 

controllers {
  uk.gov.hmrc.customs.notification.controllers.CustomsNotificationController = {
    needsLogging = true
    needsAuditing = true
  }
}

# Microservice specific config
mongodb {
  uri = "mongodb://localhost:27017/customs-notification"
}

# Metrics plugin settings
metrics {
  enabled = true
}

microservice {

  services {

    public-notification {
      host = localhost
      port = 9822
      context = /notify-customs-declarant
    }

    api-subscription-fields {
      host = localhost
      port = 9650
      context = /field
    }

    notification-queue {
      host = localhost
      port = 9648
      context = /queue
    }

    customs-notification-metrics {
      host = localhost
      port = 9827
      context = /log-times
    }

  }
}

play.http.parser.maxMemoryBuffer=20M

hotfix.translate = "old:new"